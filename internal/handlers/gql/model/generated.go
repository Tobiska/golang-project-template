// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type ProblemInterface interface {
	IsProblemInterface()
}

type TokenResolvingResult interface {
	IsTokenResolvingResult()
}

type UserCreateResult interface {
	IsUserCreateResult()
}

type UserFindResult interface {
	IsUserFindResult()
}

type UserResolvingResult interface {
	IsUserResolvingResult()
}

type UserSignInResult interface {
	IsUserSignInResult()
}

type EmailValidationProblem struct {
	Message string `json:"message"`
}

func (EmailValidationProblem) IsProblemInterface()    {}
func (EmailValidationProblem) IsUserResolvingResult() {}

type InternalErrorProblem struct {
	Message string `json:"message"`
}

func (InternalErrorProblem) IsProblemInterface()     {}
func (InternalErrorProblem) IsTokenResolvingResult() {}
func (InternalErrorProblem) IsUserResolvingResult()  {}
func (InternalErrorProblem) IsUserCreateResult()     {}
func (InternalErrorProblem) IsUserSignInResult()     {}
func (InternalErrorProblem) IsUserFindResult()       {}

type NotFoundProblem struct {
	Message string `json:"message"`
}

func (NotFoundProblem) IsProblemInterface() {}
func (NotFoundProblem) IsUserFindResult()   {}

type Token struct {
	AccessToken string `json:"accessToken"`
}

func (Token) IsTokenResolvingResult() {}

type User struct {
	ID       int    `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (User) IsUserResolvingResult() {}

type UserCreateInput struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UserCreateOk struct {
	User *User `json:"user"`
}

func (UserCreateOk) IsUserCreateResult() {}

type UserFindOk struct {
	User *User `json:"user"`
}

func (UserFindOk) IsUserFindResult() {}

type UserMutation struct {
	Create UserCreateResult `json:"create"`
	SignIn UserSignInResult `json:"signIn"`
}

type UserQuery struct {
	FindByID *User `json:"findById"`
}

type UserSignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UserSignOk struct {
	User  *User  `json:"user"`
	Token *Token `json:"token"`
}

func (UserSignOk) IsUserSignInResult() {}
